{"version":3,"sources":["app/pages/index.ts","app/app.router.tsx","app/components/banner/index.tsx","app/components/loading/index.tsx","app/components/header/index.tsx","app/components/footer/index.tsx","app/app.tsx","serviceWorker.ts","index.tsx","app/app.constants.ts","app/contexts/global.tsx"],"names":["HomePage","React","lazy","WorkPage","ContactPage","AppRouter","exact","path","component","to","Banner","Box","width","height","background","align","justify","LoadingComponent","MyHeader","size","useContext","ResponsiveContext","history","useHistory","isAbout","useRouteMatch","strict","sensitive","isContact","Header","margin","left","right","Heading","onClick","push","level","style","cursor","direction","gap","Button","label","primary","icon","Menu","MyFooter","Footer","pad","as","Linkedin","href","profileLinks","linkedin","target","Github","github","App","useState","workHistory","selectedWork","setSelectedWork","Grommet","theme","full","Main","Provider","value","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","deepMerge","base","global","colors","brand","focus","critical","warning","font","family","button","border","radius","heading","2","3","4","company","title","website","GlobalContext","createContext"],"mappings":"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","file":"static/js/main.3ff14777.chunk.js","sourcesContent":["import React from 'react';\n\nexport const HomePage = React.lazy(() => import('./home'));\nexport const WorkPage = React.lazy(() => import('./work'));\nexport const ContactPage = React.lazy(() => import('./contact'));\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport { ContactPage, HomePage, WorkPage } from './pages';\n\nconst AppRouter: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/work\" component={WorkPage} />\n            <Route exact path=\"/contact\" component={ContactPage} />\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport { Box } from 'grommet';\n\nconst Banner: React.FC = () => {\n    return (\n        <Box width=\"fill\" height=\"80px\" background=\"warning\" align=\"center\" justify=\"center\">\n            Under development\n        </Box>\n    );\n};\n\nexport default Banner;\n","import React from 'react';\nimport { Box } from 'grommet';\n\nconst LoadingComponent: React.FC = (): JSX.Element => {\n    return <Box>loading...</Box>;\n};\n\nexport default LoadingComponent;\n","import React from 'react';\nimport { Box, Button, Header, Heading, ResponsiveContext } from 'grommet';\nimport { Menu } from 'grommet-icons';\nimport { useRouteMatch, useHistory } from 'react-router-dom';\n\nconst MyHeader: React.FC = (): JSX.Element => {\n    const size = React.useContext(ResponsiveContext);\n    const history = useHistory();\n    const isAbout = useRouteMatch({\n        path: '/about',\n        strict: true,\n        sensitive: true,\n    });\n\n    const isContact = useRouteMatch({\n        path: '/contact',\n        strict: true,\n        sensitive: true,\n    });\n\n    return (\n        <Header margin={{ left: '50px', right: '50px' }}>\n            <Heading\n                onClick={(): void => {\n                    history.push('/');\n                }}\n                level=\"2\"\n                style={{ cursor: 'pointer' }}\n            >\n                Roger King\n            </Heading>\n            {size !== 'small' ? (\n                <Box direction=\"row\" gap=\"small\">\n                    <Button\n                        label=\"Work\"\n                        primary={!!isAbout}\n                        onClick={(): void => {\n                            history.push('/work');\n                        }}\n                    />\n                    <Button\n                        label=\"Contact\"\n                        primary={!!isContact}\n                        onClick={(): void => {\n                            history.push('/contact');\n                        }}\n                    />\n                </Box>\n            ) : (\n                <Box direction=\"row\" gap=\"small\">\n                    <Button icon={<Menu />} />\n                </Box>\n            )}\n        </Header>\n    );\n};\n\nexport default MyHeader;\n","import React from 'react';\nimport { Box, Button, Footer } from 'grommet';\nimport { Linkedin, Github } from 'grommet-icons';\nimport { profileLinks } from '../../app.constants';\n\nconst MyFooter: React.FC = (): JSX.Element => {\n    return (\n        <Footer direction=\"column\" align=\"center\" justify=\"center\" pad=\"small\">\n            <Box direction=\"row\">\n                <Button as=\"a\" icon={<Linkedin />} href={profileLinks.linkedin} target=\"_blank\" />\n                <Button as=\"a\" icon={<Github />} href={profileLinks.github} target=\"_blank\" />\n            </Box>\n            Roger King @ 2020\n        </Footer>\n    );\n};\n\nexport default MyFooter;\n","import React, { useState, Suspense } from 'react';\nimport { Grommet, Main } from 'grommet';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { theme, workHistory } from './app.constants';\nimport { Work } from '../types';\nimport { GlobalContext } from './contexts/global';\nimport AppRouter from './app.router';\nimport Banner from './components/banner';\nimport Loading from './components/loading';\nimport Header from './components/header';\nimport Footer from './components/footer';\n\nconst App: React.FC = (): JSX.Element => {\n    const [selectedWork, setSelectedWork] = useState<Work>(workHistory[0]);\n\n    return (\n        <Grommet theme={theme} full>\n            <Banner />\n            <Router>\n                <Header />\n                <Main pad={{ left: '150px', right: '150px' }}>\n                    <GlobalContext.Provider\n                        value={{\n                            selectedWork,\n                            setSelectedWork,\n                        }}\n                    >\n                        <Suspense fallback={<Loading />}>\n                            <AppRouter />\n                        </Suspense>\n                    </GlobalContext.Provider>\n                </Main>\n                <Footer />\n            </Router>\n        </Grommet>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { deepMerge } from 'grommet/utils';\nimport { base, ThemeType } from 'grommet/themes';\nimport { Work } from '../types';\n\nexport const theme: ThemeType = deepMerge(base, {\n    global: {\n        colors: {\n            background: '#090909',\n            brand: '#282c34',\n            'accent-1': '#B8860B',\n            'accent-2': '#CC9900',\n            'accent-3': '#D9B01C',\n            focus: '#333333',\n            critical: '#B33A3A',\n            warning: '#D9B01C',\n        },\n        font: {\n            family: 'Dosis, sans-serif',\n        },\n    },\n    button: {\n        border: {\n            radius: '7px',\n        },\n    },\n    heading: {\n        font: {\n            family: 'Pacifico, cursive',\n            size: '4em',\n        },\n        level: {\n            2: {\n                font: {\n                    family: 'Pacifico, cursive',\n                },\n            },\n            3: {\n                font: {\n                    family: 'Pacifico, cursive',\n                },\n            },\n            4: {\n                font: {\n                    family: 'Pacifico, cursive',\n                },\n            },\n        },\n    },\n});\n\nexport const workHistory: Work[] = [\n    {\n        company: 'Compass',\n        title: 'Senior Software Enginer - Tech Lead',\n        website: 'https://www.compass.com',\n        location: 'New York City',\n    },\n    {\n        company: 'Rocketrip',\n        title: 'Software Enginer',\n        website: 'https://www.rocketrip.com',\n        location: 'New York City',\n    },\n    {\n        company: 'Zillion Group',\n        title: 'Software Engineer',\n        website: 'https://www.zillion.com',\n        location: 'Norwalk, CT',\n    },\n    {\n        company: 'Crown Awards',\n        title: 'Junior Web Developer',\n        website: 'https://www.crownawards.com',\n        location: 'Elmsford, NY',\n    },\n    {\n        company: 'Apple Inc',\n        title: 'Genius',\n        website: 'https://www.apple.com',\n        location: 'Greenwich, CT',\n    },\n];\n\nexport const profileLinks = {\n    github: 'https://github.com/roger-king',\n    linkedin: 'https://www.linkedin.com/in/roger-king-dev',\n};\n","import React from 'react';\nimport { workHistory } from '../app.constants';\nimport { GlobalContextType } from '../../types';\n\nexport const GlobalContext = React.createContext<GlobalContextType>({\n    selectedWork: workHistory[0],\n    setSelectedWork: () => {},\n});\n"],"sourceRoot":""}